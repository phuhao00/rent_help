services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: renthelp_mongodb_dev
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: renthelp
    ports:
      - "27018:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - renthelp_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ping: 1})", "--quiet"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: renthelp_redis_dev
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - renthelp_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: renthelp_backend_dev
    restart: unless-stopped
    env_file:
      - .env.dev
    environment:
      - GIN_MODE=debug
      - PORT=8080
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/renthelp?authSource=admin
      - JWT_SECRET=dev-jwt-secret-key
      - REDIS_URL=redis://redis:6379
      - UPLOAD_PATH=/app/uploads
      - GOPROXY=https://goproxy.cn,direct
    ports:
      - "8081:8080"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - renthelp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["air", "-c", ".air.toml"]

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: renthelp_frontend_dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8081
      - NEXT_PUBLIC_WS_URL=ws://localhost:8081
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - renthelp_network
    command: ["npm", "run", "dev"]

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  renthelp_network:
    driver: bridge
